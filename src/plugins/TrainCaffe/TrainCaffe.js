/*globals define*/
/*jshint node:true, browser:true*/

/**
 * Generated by PluginGenerator 0.14.0 from webgme on Fri Oct 30 2015 08:32:12 GMT-0500 (CDT).
 */

define([
    'plugin/PluginConfig',
    'plugin/PluginBase',
    'executor/ExecutorClient'
], function (
    PluginConfig,
    PluginBase,
    ExecutorClient
) {
    'use strict';

    /**
     * Initializes a new instance of TrainCaffe.
     * @class
     * @augments {PluginBase}
     * @classdesc This class represents the plugin TrainCaffe.
     * @constructor
     */
    var TrainCaffe = function () {
        // Call base class' constructor.
        PluginBase.call(this);
    };

    // Prototypal inheritance from PluginBase.
    TrainCaffe.prototype = Object.create(PluginBase.prototype);
    TrainCaffe.prototype.constructor = TrainCaffe;

    /**
     * Gets the name of the TrainCaffe.
     * @returns {string} The name of the plugin.
     * @public
     */
    TrainCaffe.prototype.getName = function () {
        return 'TrainCaffe';
    };

    /**
     * Gets the semantic version (semver.org) of the TrainCaffe.
     * @returns {string} The version of the plugin.
     * @public
     */
    TrainCaffe.prototype.getVersion = function () {
        return '0.1.0';
    };

    /**
     * Main function for the plugin to execute. This will perform the execution.
     * Notes:
     * - Always log with the provided logger.[error,warning,info,debug].
     * - Do NOT put any user interaction logic UI, etc. inside this method.
     * - callback always has to be called even if error happened.
     *
     * @param {function(string, plugin.PluginResult)} callback - the result callback
     */
    TrainCaffe.prototype.main = function (callback) {
        // Use self to access core, project, result, logger etc from PluginBase.
        // These are all instantiated at this point.
        var self = this,
            executor = new ExecutorClient({
                httpsecure: self.gmeConfig.server.https.enable,
                serverPort: self.gmeConfig.server.port
            }),
            nodeObject;

        // TODO: hash should be for the generated files from CaffeGenerator
        executor.createJob({hash: hash}, function(err, jobInfo) {
            var intervalId;
            if (err) {
                return callback('Creating job failed: ' + err.toString());
            }
            self.logger.info('job created');
            self.logger.debug(jobInfo);

            intervalId = setInterval(function () {
                // Get the job-info at intervals and check for a non-CREATED/RUNNING status.
                executorClient.getInfo(hash, function (err, jInfo) {
                    var key;
                    self.logger.info(JSON.stringify(jInfo, null, 4));
                    if (jInfo.status === 'CREATED' || jInfo.status === 'RUNNING') {
                        // The job is still running..
                        return;
                    }

                    clearInterval(intervalId);
                    if (jInfo.status === 'SUCCESS') {
                        self.onJobSuccess(jInfo, callback);
                    } else {
                        //Add the resultHashes even though job failed (for user to debug).
                        for (key in jInfo.resultHashes) {
                            if (jInfo.resultHashes.hasOwnProperty(key)) {
                                self.result.addArtifact(jInfo.resultHashes[key]);
                            }
                        }
                        callback('Job execution failed', self.result);
                    }
                });
            }, 400);
        });
    };

    TrainCaffe.prototype.onJobSuccess = function (jobInfo, callback) {
        // TODO: Find a good way to present the results to the user
        this.logger.debug('Executor job finished successfully');

        // TODO: Save the results in an object somewhere...
        //self.save('TrainCaffe updated model.', function (err) {
            //if (err) {
                //callback(err, self.result);
                //return;
            //}
            //self.result.setSuccess(true);
            //callback(null, self.result);
        //});
    };

    return TrainCaffe;
});
